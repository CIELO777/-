<template>
  <div class="ChatCustomer">
    <!-- 企业微信验证码 -->
    <BindPop :shows="show" @BindComplete="BindCompletes"></BindPop>
  </div>
</template>
<script>
import wxxx from '../../uilts/wxconfig';
import wxxxChat from '../../uilts/wxconfigChat';
import { Toolbar } from '../../uilts/toolbarMixin';
import local from '../../uilts/localStorage';
import BindPop from '../../components/ChatCustomer/BindPop'
import { generateTimeout, generateNonce, generateSignature3 } from "../../uilts/tools";
let timeout = generateTimeout();
let nonce = generateNonce();
export default {
  name: "ChatCustomer",
  components: { BindPop },
  mixins: [Toolbar],
  data() {
    return {
      active: 0,
      TabActive: 0,
      code: '',
      UserId: '',
      open_userid: '',
      CorpId: '',
      Single: false,
      compId: '',
      detailsPop: false,
      star: {
        data: '',
        pop: false,
        actions: [
          {
            name: "未知",
            starLevel: 0,
          },
          {
            name: "一星",
            starLevel: 1,
          },
          {
            name: "二星",
            starLevel: 2,
          },
          {
            name: "三星",
            starLevel: 3,
          },
          {
            name: "四星",
            starLevel: 4,
          },
          {
            name: "五星",
            starLevel: 5,
          },
        ]
      },
      wxcrmId: '',
      userInfo: {},
      name: '',
      sms: '',
      codes: "",
      times: 60,
      coinNumber: 0,
      sendings: "发送验证码",
    };
  },
  watch: {
    show(val, oldVal) {//普通的watch监听
      if (val) {
        this.$toast.clear();
      }
    },
  },
  methods: {
    starEnter(action, index) { // 星级选择
      this.star.pop = false;
      this.star.data = action.name;
    },
    starSelect() {
      this.star.pop = true;
    },
    async verifyWxId() { // 校验wxcrmID 查询联系人列表是否存在
      let signature = generateSignature3(
        this.$C || local.C(),
        this.$U || local.U(),
        timeout,
        nonce
      );
      let param = new URLSearchParams();
      param.append("userId", this.$U || local.U());
      param.append("compId", this.$C || local.C());
      param.append("timeout", timeout);
      param.append("nonce", nonce);
      param.append("wxCrmId", this.wxcrmId);
      param.append("current", 1); // 默认页数是1
      param.append("signature", signature);
      await this.$post1("/api/request/itr/comp/customer/query", param)
        .then((res) => {
          console.log(this.wxcrmId, this.name, 'this.wxcrmId, name: this.name')
          // alert(res.data.length,'wxID查列表数据大于0证明绑定了')
          if (res.data.length > 0) { // 大于0证明绑定了联系人，跳转到联系人详情页面
            this.$toast.clear();
            this.userInfo = res.data[0]; // 第一个客户数据赋值；展示该数据
            sessionStorage.setItem('tabNum', 0); // 保存数据并且跳转
            sessionStorage.setItem('_crm_info', JSON.stringify(res.data[0]))
            this.$router.push({ name: 'LinkDetailed' });
          } else {
            // 没有绑定联系人。跳到新增联系人页面
            console.log(this.wxcrmId, this.name, 'this.wxcrmId, name: this.name')
            this.getName() // 只有数组大于0在去请求名字接口;
            // this.$router.push({ name: 'Addcustomer', params: { wxcrmId: this.wxcrmId, name: this.name } });
          }
        })
        .catch(function (error) { });
    },
    rand(min = 1000, max = 9999) { // 随机获取四位数字
      return Math.floor(Math.random() * (max - min)) + min;
    },
    getName() { // 获取当前客户的企业微信名字
      // return new Promise((resolve, reject) => {
      this.$get("/wx-crm-server/wx/get/customer/info", {
        params: {
          external_userid: this.wxcrmId,
          itrId: this.$U || local.U(),
        },
      }).then((res) => {
        if (res.data && res.data.external_contact && res.data.external_contact.name) {
          this.name = res.data.external_contact.name;
        } else {
          this.name = '企业微信用户' + this.rand();
        }
        this.$toast.clear();
        this.$router.push({ name: 'Addcustomer', params: { wxcrmId: this.wxcrmId, name: this.name } });
        // resolve(this.name);
      }).catch(function (error) {
        // reject(error);
      });
      // })
    },
    wxxxx() {
      let that = this;
      return new Promise(function (resolve, reject) {
        let begin = setInterval(async () => {
          console.log("🚀 ~ file: ChatCustomer.vue ~ line 145 ~ begin=setInterval ~ that.accomplish", that.accomplish)
          if (that.accomplish) {
            // wxxx(); // 拉去企业微信授权、
            wxxxChat().then(res => {
              console.log(res, 'wwwww')
              that.wxcrmId = res;
              resolve(res)
            }).catch(error => {
              reject(error)
              console.log(error, 'wwwxxxx')
            })
            // await wxxxChat().then(res => {
            //   console.log(res)
            //   resolve(res)
            // }).catch(error => {
            //   console.log(error)
            // });
            // console.log('CHJATCURST', wxiD)
            clearInterval(begin); // 清空定时器
          }
        }, 500)
      })
    },
    getCurEx() {
      return new Promise((resolve, reject) => {
        let that = this;
        setTimeout(() => {
          wx.invoke('getCurExternalContact', {
          }, function (res) {
            if (res.err_msg == "getCurExternalContact:ok") {
              that.wxcrmId = res.userId;
              resolve(res)
            } else {
              //错误处理
              that.$toast.fail({
                message: '客户ID获取失败，请稍后再试...',
                forbidClick: true,
                duration: 0,
                overlay: true,
              });
              reject(res)
            }
          });
        }, 2000)
      })
    },
    init() { // 初始化请求
      this.$toast.loading({
        message: '加载中...',
        forbidClick: false,
        duration: 0,
        overlay: true,
      });
      this.wxxxx().then(res => { // 企业微信授权
        console.log(res, 'wxIDidIDIDIDID')。
        // return this.getName(); // 获取名字
        this.verifyWxId()
        // return this.getCurEx(); // 获取企业微信客户ID
      }).catch(error => {
        console.log(error)
      }).then(res => {
        // this.wxcrmId = res.userId;
        // return this.getName(); // 获取名字
      }).catch(error => {
        console.log(error)
      }).then(res => {
        // console.log(res, ;'我要name')
        // this.verifyWxId()
      })
      sessionStorage.setItem('active', 'ChatCustomer')
    },
    async BindCompletes() { // 关闭弹框
      this.show = false;
      await this.getUserinfo();  // 重新拉去信息接口。
    }
  },
  async created() {
    this.$toast.loading({
      message: '加载中...',
      forbidClick: false,
      duration: 0,
      overlay: true,
    });
    // if (sessionStorage.getItem("not_bind")) return;
    // console.log('222222222');
    // this.init()
    // wxxx()
    // setTimeout(() => {
    //   console.log('first2')
    //   let that = this;
    //   wx.invoke('getCurExternalContact', {
    //   }, function (res) {
    //     if (res.err_msg == "getCurExternalContact:ok") {
    //       that.wxcrmId = res.userId;
    //       console.log(res.userId, 'res.userIdres.userIdres.userId')
    //     } else {
    //       //错误处理
    //       that.$toast.fail({
    //         message: '网络错误，请稍后再试...',
    //         forbidClick: true,
    //         duration: 0,
    //         overlay: true,
    //       });
    //     }
    //   });
    // }, 2000)
    // setTimeout(async () => {
    //   await this.getName(); // 获取名字
    //   this.verifyWxId();
    // }, 2500)
  },
};
</script>


  // changeSelectTag() { // 下拉选择器 change事件
    //   console.log(this.TagList[this.SelectTag])
    //   this.SelectTagList = this.TagList[this.SelectTag].tags;
    // },
    // addTag(type) { // 新增标签 type1标签 2标签组
    //   let signature = generateSignature3(0, 40000013, 13394171296, timeout, nonce);
    //   if (type == 1) {
    //     if (this.SelectTag === '' || this.Tagname === '') {
    //       this.$toast("请选择标签组，并且输入标签名字")
    //       return;
    //     }
    //   } else {
    //     if (this.Tagname === '') {
    //       this.$toast("请输入标签组名字")
    //     }
    //   }
    //   // 过滤数组：
    //   let params = {
    //     signature,
    //     timeout,
    //     nonce,
    //     userId: 13394171296,
    //     compId: 40000013,
    //     id: type == 2 ? 0 : 0,
    //     name: this.Tagname,
    //     sort: this.TagList.length,
    //     parentId: type == 2 ? 0 : this.TagList[this.SelectTag].id,
    //     tag: type == 2 ? null : encodeURI(JSON.stringify([{ id: "0", name: this.Tagname, "sort": 99 }])),
    //   }
    //   console.log([{ id: "0", name: this.Tagname, "sort": 99 }])
    //   this.$get("/api/request/crm/tag/save", { params })
    //     .then((res) => {
    //       if (res.error == 'success') {
    //         this.getTagList(1) // 拉取数据 并且更新标签
    //       } else {
    //         this.$toast.fail("内部错误")
    //       }
    //       this.Tagname = ''
    //       console.log(res)
    //     })
    //     .catch((error) => {
    //       console.log(error);
    //     });
    // },
    // deleTag(item, index, type) {  // 删除标签
    //   console.log(item, index, type)
    //   let param = new URLSearchParams();
    //   let signature = generateSignature3(40000013, 13394171296, timeout, nonce);
    //   param.append("ids", item.id);
    //   param.append("userId", 13394171296);
    //   param.append("compId", 40000013);
    //   param.append("signature", signature);
    //   param.append("timeout", timeout);
    //   param.append("nonce", nonce);
    //   this.$post1("/api/request/crm/tag/delete", param)
    //     .then((res) => {
    //       console.log(res)
    //       if (res.error == 'success') {
    //         this.getTagList(type)
    //       } else {
    //         this.$toast.fail("删除失败")
    //       }
    //     })
    //     .catch((error) => {
    //       console.log(error);
    //     });
    // },
    allocation() {
      // let param = {
      //   handover_userid: sessionStorage.getItem("bind_UserID"),
      //   takeover_userid: this.takeover_userid,
      //   external_userid: [sessionStorage.getItem('wxcrmId')],
      //   compId: this.userInfos().bind_comp_id1,
      //   transfer_success_msg: '您好，您的服务已经升级，后续将由我的同事',
      // };
      // 空校验;
      // if (this.takeover_userid === '') {
      //   this.$toast('请选择分配的员工')
      // }else {
      //   this.$toast.fail('内部错误，请稍后再试！')
      // }
      return;
      let param = {
        handover_userid: 'SongTianYu',
        takeover_userid: 'MoMo',
        external_userid: ['wmmmFVEAAAQbwte-CPVAc-zHKbGgErzA'],
        compId: 40021450,
        transfer_success_msg: '您好，您的服务已经升级，后续将由我的同事接替我的工作，继续为您服务！',
      };
      this.$post1("/wx-crm-server/wx/staff/transfer/customer", param)
        .then((res) => {
          console.log(res);
        })
        .catch((error) => {
          console.log(error);
        });
    },